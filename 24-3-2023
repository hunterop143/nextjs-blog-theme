Core Java Practicals 

Practical 1a 

Aim:- Write Java program to display the following pattern.  Source Code:- import java.io.*; public class Pattern 

{ 

public static void main(String args[]) 

{ int i,j,k; for (i=5;i>=1;i--) 

{ 

for(j=5-i;j>=1;j--) 

{ 

System.out.print("  "); 

} 

for(k=0;k<i;k++) 

{ 

System.out.print(" * "); 

} 

System.out.println(); 

} 

} 

} 

Output:- 

 

 

 

 

Practical 1b 

Aim:- Write program that takes number as inputs & prints multiplication table upto 10. Source Code:- import java.util.*; public class Mul 

{ 

public static void main(String args[]) 

{ 

Scanner s=new Scanner(System.in); System.out.println("Enter number"); int n=s.nextInt(); for(int i=1;i<=10;i++) 

{ 

System.out.println(n+"*"+i+"="+n*i); 

} 

} 

} 



 

Practical 1c 

Aim:- Write Java program to reverse a string. Source Code:- import java.util.*; public class Reverse 

{ 

public static void main(String args[]) 

{ 

String str="Hello"; char[] c=str.toCharArray(); for(int i=c.length-1; i>=0;i--) 

System.out.print(c[i]); 

} 

} 

 

 



Practical 1d 

Aim:- Write Java program to print area & perimeter of circle. Source Code:- import java.util.*; public class Circle 

{ 

public static void main(String args[]) 

{ 

Scanner s=new Scanner(System.in); double r,a,c; 

System.out.println("Enter radius"); r=s.nextDouble(); 

System.out.println("Radius entered"+r); a=Math.PI*r*r; c=2*Math.PI*r; 

System.out.println("Area of circle"+a); 

System.out.println("Perimeter of circle"+c); 

} 

} 

	 	
Practical 1e & 1f pending 

Practical 1g 

Aim:- Write a Java program to find largest & smallest element from an array. Source Code:- import java.util.*; public class Test 

{ 

public static void main(String args[]) 

{ 

int arr[]={20,10,35,60,15,25,40,18}; int smallest,largest; smallest=arr[0]; largest=arr[0]; for(int i=1;i<arr.length;i++) 

{ 

if(arr[i]>largest) 

{ 

largest=arr[i]; 

} 

else if(arr[i]<smallest) 

{ 

smallest=arr[i]; 

} 

} 

System.out.println("Largest element"+largest); 

System.out.println("Smallest element"+smallest); 

} 

} 

Output:-  

 

 

Practical 2 

Aim:- Write a Java program to design a class sort data that contains asc desc method. Source Code:- import java.util.*; public class Sort 

{ 

public static void main(String args[]) 

{ int n; 

Scanner s=new Scanner(System.in); System.out.println("enter number to sort"); n=s.nextInt(); int a[ ]=new int[n]; 

 

System.out.println("enter"+n+"elements of array"); for(int i=0;i<n;i++) 

{ 

a[i]=s.nextInt(); 

} 

asce(a,n); 

System.out.println("array in ascending order"); for(int i=0;i<n;i++) 

{ 

System.out.println(a[i]+"\t"); 

} 

desc(a,n); 

System.out.println("array in Descending order"); for(int i=0;i<n;i++) 

{ 

System.out.println(a[i]+"\t"); 

} 

} 

public static void asce(int a[ ],int n) 

{ 

for(int i=0;i<n-1;i++) 

{ 

for(int j=i+1;j<n;j++) 

{ if(a[i]>a[j]) { int t=a[i]; a[i]=a[j]; a[j]=t; 

} 

} 

} 

} 

public static void desc(int a[ ],int n) 

{ 

for(int i=0;i<n-1;i++) 

{ 

for(int j=i+1;j<n;j++) 

{ if(a[i]<a[j]) 

{ int t=a[i]; a[i]=a[j]; a[j]=t; 

} 

} 

} 

} 

} 

Output:- 

 

 

 

 

 

 

 

 

 

 

Practical 3 

Aim:- Write Java program to implement abstract class. Source Code:- import java.util.*; abstract class Shape 

{ 

abstract void area(); 

} 

class Rectangle extends Shape 

{ 

void area() 

{ 

double l,b; 

Scanner s=new Scanner(System.in); 

System.out.println("Enter lenght of rectangle"); l=s.nextDouble(); 

System.out.println("Enter Breadth of rectangle"); b=s.nextDouble(); 

System.out.println("Area of rectangle"+(l*b)); 

} 

} 

class Circle extends Shape 

{ 

void area() 

{ 

double r; 

Scanner s=new Scanner(System.in); 

System.out.println("Enter radius of circle"); r=s.nextDouble(); 

System.out.println("Area of circle is"+(3.14*r*r)); 

} 

} 

class Demo 

{ 

public static void main(String args[]) 

{ 

Rectangle R=new Rectangle(); 

R.area(); 

Circle C=new Circle(); 

C.area(); 

} 

} 

Output:- 

 

 

 

 

 

Practical 4 

Aim:-  Write a Java program to implement method overriding. Source Code:- import java.util.*; class base 

{ 

 	void show() 

 	{ 

 	 	System.out.println("base class is invoked"); 

 	} 

} 

class derived extends base 

{ 

 	void show() 

 	{ 

 	System.out.println("derived class is invoked"); 

 	} 

} 

class Demo1 

{ 

 	public static void main(String args[]) 

 	{ 

 	 	derived d=new derived(); 

 	 	d.show(); 

 	} 

} 

Output:- 

 

 

Practical 5 

Aim:- Write a Java program to implement Multiple inheritance. Source Code:- import java.util.*; interface A 

{ 

 	void getA(); 

} 

interface B 

{ 

 	void getB(); 

} 

class C implements A,B 

{ 

 	public void getA() 

 	{ 

 	 	System.out.println("getA is invoked"); 

 	} 

 	public void getB() 

 	{ 

 	 	System.out.println("getB is invoked"); 

 	} 

} 

class Multipledemo 

{ 

 	public static void main(String args[]) 

 	{ 

 	 	C c1=new C();  	 	c1.getA();  	 	c1.getB(); 

 	} 

} 

Output:- 

 

Practical 6 

Aim:- Create a package, add necessary class and import the package in Java Class.  Source Code:- mypack folder  Student.java package mypack; public class Student 

{ 

 	String name;  	int rn; 

 	public void getdata(String n,int a) 

 	{  	 	name=n;  	 	rn=a; 

 	} 

 	public void display() 

 	{ 

 	 	System.out.println("Student Name"+name+"\n Student 

Roll no"+rn); 

 	} 

} 

 

Studentdemo.java import mypack.*; 

public class Studentdemo extends Student 

{ 

public static void main(String args[]) 

{ 

 	 	Student s=new Student(); 

 	 	s.getdata("AAA",10); 

 	 	s.display(); 

 	} 

} 

Output:-  

 

 

 

 

 

Practical 7 

Aim:- Write a Java program to implement vectors.  Source Code:- import java.util.*; class Vectordemo 

{ 

 	public static void main (String args[]) 

 	{ 

 	 	Vector v=new Vector(); 

 	 	System.out.println("Initial size of vector:"+v.size()); 

 	 	System.out.println("Initial Capacity of vector:"+v.capacity()); 

 	System.out.println("Is vector empty:"+v.isEmpty());  	 	int s=args.length;  	 	for(int i=0;i<s;i++) 

 	 	 	{ 

 	 	 	 	v.addElement(args[i]); 

 	 	 	} 

 	 	int l=v.size(); 

 	 	System.out.println("Current size of vector:"+l); 

 	 	System.out.println("Current capacity of 

vector:"+v.capacity()); 

 	 	System.out.println("Is vector empty:"+v.isEmpty());  	 	String str[]=new String[l]; 

 	 	v.copyInto(str); 

 	 	System.out.println("Elements in vector:");  	 	for(int i=0;i<l;i++) 

 	 	 	{ 

 	 	 	 	System.out.println(str[i]+" "); 

 	 	 	} 

 	 	System.out.println("First element"+v.firstElement()); 

 	 	System.out.println("\n Last element"+v.lastElement()); 

 	 	System.out.println("\n Element at 3rd position"+v.elementAt(3)); 

 	 	v.removeElementAt(0); 

 	 	System.out.println("After removing"+v.firstElement()); 

 	 	v.add(0,"xyz"); 

 	 	System.out.println("After adding"+v.firstElement()); System.out.println("Elements in vectors"); 

 	Enumeration e=v.elements();  	 	while(e.hasMoreElements()) 

 	 	{ 

 	 	 	System.out.println(e.nextElement()+" "); 

 	 	} 

 	} 

} 	 	 

Output:-  

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Practical 8 

Aim:- Write a Java program to implement Multi-Threading. 

Source Code:- import java.util.*; 

class ThreadDemo extends Thread 

{ 

 	private String tname; 

 	ThreadDemo(String s) 

 	{  	 	tname=s; 

 	 	System.out.println("Creating"+tname); 

 	} 

 	public void run() 

 	{ 

 	 	System.out.println("Running"+tname); 

 	 	try 

 	 	{ 

 	 	 	for(int i=4;i>0;i--) 

 	 	 	{ 

 	 	 	 	System.out.println("Thread"+tname+","+i); 

 	 	 	 	Thread.sleep(500); 

 	 	 	} 

 	 	} 

 	 	catch(InterruptedException e) 

 	 	{ 

 	 	 	System.out.println("Thread"+tname+"Interrupted"); 

 	 	} 

System.out.println("Thread"+tname+"exiting"); 

} 

} 

public class Multithread 

{ 

 	public static void main(String args[]) 

 	{ 

 	 	ThreadDemo t1=new ThreadDemo("Thread1");  	 	t1.start(); 

 	 	ThreadDemo t2=new ThreadDemo("Thread2");  	 	t2.start(); 

 	 	ThreadDemo t3=new ThreadDemo("Thread3");  	 	t3.start(); 

 	} 

} 

Output:- 

 

 

 

 

 

 

 

 

 

 

Practical 9 

Aim:- Write a Java program to open a file and display the contents in the console window and also copy the contents from one file to another.  Source Code:- import  java.io.*; class FileDemo 

{ 

 	public static void main(String args[])throws IOException 

 	{ 

 	 	FileReader fr=new FileReader("test.txt"); 

 	 	BufferedReader br=new BufferedReader(fr); 

 	 	FileWriter fw=new FileWriter("test2.txt"); 

 	 	String s; 

 	 	while((s=br.readLine())!=null) 

{ 

 	 	System.out.println(s);  	 	 	fw.write(s); 

 	 	} 

 	 	fr.close();  	 	fw.close(); 

 	} 

} 

Output:-  

 

 

 

 

 

 

Practical 10 

Aim:-Design an AWT program to print the factorial of input value.   Source Code:- import java.awt.*; import java.awt.event.*; 

public class Fact extends Frame implements ActionListener 

{ 

Label l; 

TextField t; 

Button b; 

public Fact() 

{ 

setLayout(new FlowLayout()); l=new Label("Enter number:"); t=new TextField(20); b=new Button("calculate Fact"); add(l); add(t); add(b); 

b.addActionListener(this); setSize(300,300); setVisible(true); 

} 

public void actionPerformed(ActionEvent e) 

{ 

String s=t.getText(); int n=Integer.parseInt(s); int f=1; for(int i=n;i>0;i--) 

{ 

f=f*i; 

} 

System.out.println("Factorial of given number is:"+f); 

} 

public static void main(String args[]) 

{ 

new Fact(); 

} 

} 

Output:- 

 

 



 

Practical 11 

Aim:-Write a Java program to implement Exception Handling.  Source Code:- import java.io.*; public class ExceptionDemo 

{ 

 	public static void main(String args[])throws IOException 

 	{ 

 	 	int n1=10,n2=0;  	 	int a[]={1,2,3};  	 	int d1,d2; 

 	 	System.out.println("Handling Arithmetic Exception:");  	 	try 

 	 	{ 

	 	d1=n1/n2; 

} 

catch(ArithmeticException e) 

{ 

 	 	 	System.out.println("Division by zero exception:"+e); 

 	 	} 

 	 	System.out.println("Handling array index out of BoundException:"); 

 	 	try 

 	 	{ 

 	 	 	d2=a[0]/a[3]; 

 	 	} 

 	 	catch(ArrayIndexOutOfBoundsException e) 

 	 	{ 

   System.out.println("Division by array Index out of bound:"+e); 

 	 	} 

 	} 

} 

Output:- 

 

 

 

Practical 12 

Aim:-Design an AWT program to perform various string operations like reverse and concatenation.  

Source Code:- import java.awt.*; import java.awt.event.*; 

public class StringDemo extends Frame implements ActionListener 

 	{ 

 	 	Label l1,l2; 

 	 	TextField t1,t2;  	 	Button b1,b2;  	 	public StringDemo() 

 	 	{ 

 	 	 	setLayout(new FlowLayout());  	 	 	l1=new Label("Enter String 1:");  	 	 	l2=new Label("Enter String 2:");  	 	 	t1=new TextField(20);  	 	 	t2=new TextField(20);  	 	 	b1=new Button("Reverse");  	 	 	b2=new Button("Concat");  	 	 	add(l1);add(t1);  	 	 	add(l2);add(t2);  	 	 	add(b1);add(b2);  	 	 	b1.addActionListener(this);  	 	 	b2.addActionListener(this);  	 	 	setTitle("String function");  	 	 	setSize(300,300);  	 	 	setVisible(true); 

} 

public void actionPerformed(ActionEvent e) 

{ 

	 	if(e.getSource()==b1) 

 	 	 	{ 

 	 	 	 	String s1=t1.getText();  	 	 	 	char ch[]=s1.toCharArray(); 

 	 	 	 	System.out.print("Reverse of string 1:");  	 	 	 	for(int i=ch.length-1;i>=0;i--) 

 	 	 	 	System.out.print(ch[i]); 

 	 	 	} 

 	 	 	else if(e.getSource()==b2) 

 	 	 	{ 

 	 	 	 	String s1=t1.getText(); 

 	 	 	 	String s2=t2.getText(); 

 	 	 	 	String s3=s1+s2; 

 	 	 	 	System.out.println("\n String 

Concatenation:"+s3); 

 	 	 	} 

 	} 

public static void main(String args[]) 

{ 

 	new StringDemo(); 

} 

} 

Output:- 

 

 

 

 

 

 

 

Practical 13 

Aim:-Write a Java program to count the letters, spaces, numbers and other characters of input string.  Source Code:- import java.util.*; public class CountDemo 

{ 

 	public static void main(String args[]) 

 	{ 

 	 	System.out.println("Enter String"); 

  Scanner s=new Scanner(System.in);   String str=s.nextLine();   count(str); 

 	} 

 	public static void count(String a) 

 	{ 

 	 	int l=0,sp=0,n=0,sc=0; 

char ch[]=a.toCharArray(); for(int i=0;i<a.length();i++) 

	{ 	 

	 	if(Character.isLetter(ch[i])) 

 	 	 	{  	 	 	 	l++; 

 	 	 	} 

 	 	 	else if(Character.isSpaceChar(ch[i])) 

 	 	 	{ 

 	 	 	 	sp++; 

 	 	 	} 

 	 	 	else if(Character.isDigit(ch[i])) 

 	 	 	{  	 	 	 	n++; 

 	 	 	} 

 	 	 	else 

 	 	 	{ 

 	 	 	 	sc++; 

 	 	 	} 

 	 	} 

 	 	System.out.println("Letters"+l); 

 	 	System.out.println("Spaces"+sp); 

 	 	System.out.println("Number"+n); 

 	 	System.out.println("Special Character"+sc); 

 	} 

} 

Output:- 

 

 

 

 

Practical 14 

Aim:- Write a Java program for multiplying two matrices and print the product for the same.  Source Code:- import java.util.*; public class MatrixMul 

{ 

 	public static void main(String args[]) 

 	{ 

 	 	int a[][]=new int[3][3];  	 	int b[][]=new int[3][3];  	 	int c[][]=new int[3][3];  	 	int i,j; 

 	 	Scanner s=new Scanner(System.in); 

 	 	System.out.println("Enter elements of Matrix A");  	 	for(i=0;i<3;i++) 

 	 	{ 

 	 	 	for(j=0;j<3;j++) 

 	 	 	{ 

	 	 	a[i][j]=s.nextInt(); 	 

	 	} 

} 

System.out.println("Enter elements of Matrix B"); 

 	 	for(i=0;i<3;i++) 

 	 	{ 

 	 	 	for(j=0;j<3;j++) 

 	 	 	{ 

 	 	 	 	b[i][j]=s.nextInt(); 	 

 	 	 	} 

 	 	} 

 	 	System.out.println("Entered elements of Matrix A");  	 	for(i=0;i<3;i++) 

 	 	{ 

 	 	 	for(j=0;j<3;j++) 

 	 	 	{ 

 	 	 	 	System.out.print(a[i][j]+"");  

 	 	 	} 

 	 	 	 	System.out.println(); 

 	 	} 

 	 	System.out.println("Entered elements of Matrix B");  	 	for(i=0;i<3;i++) 

 	 	{ 

 	 	 	for(j=0;j<3;j++) 

 	 	 	{ 

	 	 	System.out.print(b[i][j]+"");  

	 	} 

	 	 	 	System.out.println(); 

 	 	} 

 	 	for(i=0;i<3;i++) 

 	 	{ 

 	 	 	for(j=0;j<3;j++) 

 	 	 	{ 

 	 	 	 	c[i][j]=0;  	 	 	 	for(int k=0;k<3;k++) 

 	 	 	 	{ 

 	 	 	 	 	c[i][j]+=a[i][k]*b[k][j]; 

 	 	 	 	} 

 	 	 	} 

 	 	} 

 	 	System.out.println("Multiplication of Matrix C");  	 	for(i=0;i<3;i++) 

 	 	{ 

 	 	 	for(j=0;j<3;j++) 

 	 	 	{ 

 	 	 	 	System.out.print(c[i][j]+" "); 

 	 	 	} 

 	 	 	 	System.out.println(); 

 	 	} 

 	} 

} 

Output:- 

 

 

 

 

 

 

 

 

 

 

Practical 15 

Aim:- Write a Java program to read the student data from the user and store it in the file.  Source Code:- import java.util.*; import java.io.*; class FileTest 

{ 

 	public static void main(String args[])throws IOException 

 	{ 

 	 	String str;  	 	int rn; 

 	 	Scanner s=new Scanner(System.in); System.out.println("Enter Student name"); str=s.nextLine(); 

 	System.out.println("Enter Roll no");  	 	rn=s.nextInt(); 

 	 	try 

 	 	{ 

 	 	 	FileWriter fw=new FileWriter("Stud.txt");  	 	 	BufferedWriter bw=new BufferedWriter(fw);  	 	 	bw.write("Student data inserted by user"); 

 	 	 	bw.newLine(); 

 	 	 	bw.write("Student name"+str+"\n Student Roll no"+rn); 

 	 	 	bw.close(); 

   System.out.println("Student data inserted successfully");  

 	 	} 

 	 	catch(Exception e) 

 	 	{ 

 	 	 	System.out.println("Errors"); 

 	 	} 

 	} 

} 

Output:- 

 

 

 

 

 

 

 

Practical 16 

Aim:- Write a Java program to read the student data from the user and store it in the file.  Source Code:- import java.awt.*; import java.awt.event.*; 

public class ResultDemo extends Frame implements ActionListener 

{ 

 	Label lbltitle,lblexam,lblname,lbljava,lblmaths,lblse; 

 	TextField txtexam,txtname,txtjava,txtmaths,txtse;  	Button b1;  	int total;  	float avg;  	public ResultDemo() 

 	{ 

 	 	setLayout(null); 

 

lbltitle=new Label("Enter student details"); lbltitle.setBounds(50,50,200,20); 

	 	lblexam=new Label("Exam No"); 

 	 	lblexam.setBounds(20,80,130,20); 

 

 	 	lblname=new Label("Name");  	 	lblname.setBounds(20,105,130,20); 

 	 	 

 	 	lbljava=new Label("Core Java");  	 	lbljava.setBounds(20,130,130,20); 

 

 	 	lblmaths=new Label("Maths");  	 	lblmaths.setBounds(20,155,130,20); 

 

 	 	lblse=new Label("SE");  	 	lblse.setBounds(20,180,170,20); 

 

 	 	txtexam=new TextField(5);  	 	txtexam.setBounds(200,80,100,20); 

 

 	 	txtname=new TextField(10);  	 	txtname.setBounds(200,105,100,20); 

 

 	 	txtjava=new TextField(5);  	txtjava.setBounds(200,130,40,20); 

 	txtmaths=new TextField(10);  	txtmaths.setBounds(200,155,40,20); 

 

 	 	txtse=new TextField(5);  	 	txtse.setBounds(200,180,40,20); 

 

 	 	b1=new Button("Display Result");  	 	b1.setBounds(100,220,150,30); 

 

 	 	add(lbltitle);  	 	add(lblexam);add(txtexam);  	 	add(lblname);add(txtname);  	 	add(lbljava);add(txtjava);  	 	add(lblmaths);add(txtmaths);  	 	add(lblse);add(txtse); 

 	 	add(b1); 

 	 	 

 	 	b1.addActionListener(this);  	 	setTitle("Marksheet");  	 	setSize(500,650);  	 	setVisible(true);  	 

 	} 

 	public void actionPerformed(ActionEvent e) { 

	 	if(e.getSource()==b1) 

	 	{ 

	 	 	int m1=Integer.parseInt(txtjava.getText()); 

 	 	 	int m2=Integer.parseInt(txtmaths.getText());  	 	 	int m3=Integer.parseInt(txtse.getText()); 

 	 	 	total=m1+m2+m3;  	 	 	avg=total/3; 

 	 	 	Graphics g=getGraphics(); 

 	 	 	g.drawString("Student Result",50,280); 

 	 	 	g.drawString("Student 

Examno"+txtexam.getText(),50,310); 

 	 	 	g.drawString("Student 

Name"+txtname.getText(),50,340); 

 	 	 	g.drawString("Marks in 

Java"+txtjava.getText(),50,370); 

 	 	 	g.drawString("Marks in 

Maths"+txtmaths.getText(),50,400); 

 	 	 	g.drawString("Marks in 

SE"+txtse.getText(),50,430); 

 	 	 	g.drawString("Total"+total,50,460); 

 	 	 	g.drawString("Avg Marks"+avg,50,490); 

 	 	} 

 	} 

 	public static void main(String args[]) 

 	{ 

 	 	new ResultDemo(); 

} 

} 

Output:-  

 

 

 
